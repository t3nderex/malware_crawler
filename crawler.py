"""
    TODO:
        download wait 기능 추가 - 다운로드할 샘플 이름 얻어오기.,
        프록시 추가할 지 말지 생각하기
"""

"""
필터 설정됐는지 확인해야 함
"""
from selenium.common.exceptions import NoSuchElementException
from random import sample
from re import A
from turtle import back
from fake_useragent import UserAgent
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.select import Select
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from random import uniform
from time import sleep
import os




class Anyrun():
    def __init__(self):
        pass
    
    
    def login(self, id,pw):
        login_btn_xpath = '/html/body/nav/ul[2]/li[4]'
        input_id_xpath = '//*[@id="at-field-username_and_email"]'
        input_pw_xpath = '//*[@id="at-field-password"]'
        signin_btn_xpath = '//*[@id="at-btn"]'

        driver.find_element(By.XPATH, login_btn_xpath).click()
        driver.find_element(By.XPATH, input_id_xpath).send_keys(id)
        driver.find_element(By.XPATH, input_pw_xpath).send_keys(pw)
        driver.find_element(By.XPATH, signin_btn_xpath).click()


    def accepct_cookie(self):
        accept_cookie_btn_xpath = '//*[@id="cookies"]/div/a[2]'
        driver.find_element(By.XPATH, accept_cookie_btn_xpath).click()
    


    

    def get_samples(self,
                    download_all = True,
                    file_type = 'Adobe PDF',
                    country_type ='Korea, Republic of'
                    ):
        
        self.__set_filter_and_search(file_type, country_type)
        sleep(uniform(4,5))
        if download_all is True:
            current_page, last_page = self.__get_num_of_page()
            print(f"전체 페이지 수:{last_page}")
            
        for current_page in range(last_page):
            current_page,last_page = self.__get_num_of_page()
            sleep(uniform(2,3))
            print(f"현재 페이지:{current_page}/{last_page}")
            for sample_cnt in range(1, self.__get_num_of_sample_page()+1):
                self.__enter_sample_page(sample_cnt)
                self.__download_sample()
                driver.switch_to.window(driver.window_handles[0])       # 메인 탭으로 이동
                print(f"{sample_cnt}개 다운로드 완료")
                sleep(uniform(3,4))
            sleep(5)
            self.__turn_page()
            
        return True

    def __set_filter_and_search(self, file_type = 'Adobe PDF', country_type = 'Korea, Republic of'):
        filter_search_btn = '//*[@id="historySearchBtn"]'
        select_extension = '//*[@id="searchHistByExt"]'
        select_country = '//*[@id="countrySearch"]'         
        filter_btn = '//*[@id="history-filterBtn"]'         

        # 필터(클릭)
        sleep(uniform(2,3))
        driver.find_element(By.XPATH, filter_btn).click()               

        # 파일 타입 선택
        select = Select(driver.find_element(By.XPATH, select_extension))
        sleep(uniform(2,3))
        select.select_by_visible_text(file_type)

        # 국가 선택
        select = Select(driver.find_element(By.XPATH, select_country))     
        sleep(uniform(2,3))
        select.select_by_visible_text(country_type)            

        # 검색
        driver.implicitly_wait(5)
        driver.find_element_by_xpath(filter_search_btn).click()        
        return True

        
    def __get_num_of_page(self):
        current_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        pages = driver.find_element_by_xpath(current_page_xpath)
        pages = pages.text.split()
        current_page = int(pages[0])
        last_page = int(pages[2])
        return current_page, last_page    

    
    def __get_num_of_sample_page(self):
        sample_list_class = 'history-table--content__row'
        num_of_sample = len(driver.find_elements(By.CLASS_NAME, sample_list_class))
        return num_of_sample   

    def __enter_sample_page(self, sample_cnt):
        sample_link_xpath = f'/html/body/div[7]/div[1]/div[3]/div[1]/div/div[{sample_cnt}]/a'
        driver.find_element_by_xpath(sample_link_xpath).click()            
        sleep(uniform(5,6))
        driver.switch_to.window(driver.window_handles[1])
        

    def __download_sample(self):
        sample_name_xpath ='//*[@id="main"]/aside/div[2]/div/div[1]/div[2]/div[2]/div[1]/div[1]'
        download_btn_xpath = '//*[@id="downloadSample"]'
        sample_name = driver.find_element(By.XPATH, sample_name_xpath).text
        sample_name =(sample_name.split('.'))[0]
        sleep(uniform(5,6))
        self.__download()
        sleep(uniform(5,6))
        driver.close()
        
        return True 
    
    
    def __turn_page(self):
        next_page_btn_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[3]'
        sleep(2)
        driver.find_element_by_xpath(next_page_btn_xpath).click()
        return True

        
    def __download(self):
        sleep(uniform(4,6))
        download_btn_xpath = '//*[@id="downloadSample"]'
        download_popup='/html/body/div[4]/div[1]/div[1]/h3/span'
        try:
            down_btn = driver.find_element(By.XPATH, download_btn_xpath)
        except NoSuchElementException:
            driver.back()
            self.__download()

        sleep(uniform(3,6))
        driver.find_element(By.XPATH, download_btn_xpath).click()
        sleep(uniform(3,6))
        if r"content.any.run/" in driver.current_url:
            sleep(uniform(100,200))
            driver.back()
            self.__download()
        try:
            driver.find_element(By.XPATH, download_popup).click()
        except NoSuchElementException:
            pass



def get_current_path():
    return os.path.dirname(os.path.abspath(__file__))


def set_driver(download_path = get_current_path()+"\samples", w_width=1400, w_height=900):
    global g_download_path 
    g_download_path = download_path
    if not os.path.exists(download_path):
        os.makedirs(download_path)
    
    
    
    ua = UserAgent(use_cache_server=True)
    driver_opts = webdriver.ChromeOptions()
    # driver_opts.add_argument('headless')
    driver_opts.add_experimental_option('excludeSwitches', ['enable-logging'])
    
    preferences = {
                "profile.default_content_settings.popups": 0,
                "download.default_directory": download_path,
                "directory_upgrade": True
                }
    driver_opts.add_experimental_option('prefs', preferences)    

    driver_opts.add_argument(f"user-agent={ua.random}")
    # driver_opts.add_argument("user-agent=Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=driver_opts)
    driver.set_window_size(w_width,w_height)
    return driver


def get_account_from_txt(file):
    with open(file, "r") as f:
        account = f.readlines()
        id = account[0]
        pw = account[1]
    return id, pw


if __name__ == '__main__':
    ANYRUN = 'https://app.any.run/submissions'
    account = ''
    id, pw = get_account_from_txt(account)
    anyrun = Anyrun()                
    driver = set_driver()

    driver.implicitly_wait(5)
    driver.get(ANYRUN)                  # 브라우져 켜기
    anyrun.accepct_cookie()             # 쿠키 허용
    anyrun.login(id, pw)                # 로그인
    anyrun.get_samples()

    
    
