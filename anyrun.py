from selenium.common.exceptions import NoSuchElementException

from selenium.webdriver.support.select import Select
from selenium.webdriver.common.by import By
from random import uniform
from time import sleep

from anyrun_exception import*


class Anyrun():
    def __init__(self, driver):
        self.driver = driver
    
    
    def login(self, id,pw):
        login_btn_xpath = '/html/body/nav/ul[2]/li[4]'
        input_id_xpath = '//*[@id="at-field-username_and_email"]'
        input_pw_xpath = '//*[@id="at-field-password"]'
        signin_btn_xpath = '//*[@id="at-btn"]'
        try:
            self.driver.find_element(By.XPATH, login_btn_xpath).click()
            self.driver.find_element(By.XPATH, input_id_xpath).send_keys(id)
            self.driver.find_element(By.XPATH, input_pw_xpath).send_keys(pw)
            self.driver.find_element(By.XPATH, signin_btn_xpath).click()
        except LoginError as e:
            print(e)
            return False
        else:
            return True


    def accepct_cookie(self):
        accept_cookie_btn_xpath = '//*[@id="cookies"]/div/a[2]'
        try:
            sleep(uniform(3, 4))
            self.driver.find_element(By.XPATH, accept_cookie_btn_xpath).click()
        except AcceptCookieError as e:
            print(e)
            return False
        else:
            return True

    def set_filter_and_search(self, country_type = 'Korea, Republic of', file_type = 'Adobe PDF'):
        sleep(5)
        filter_search_btn = '//*[@id="historySearchBtn"]'
        select_extension = '//*[@id="searchHistByExt"]'
        select_country = '//*[@id="countrySearch"]'         
        filter_btn = '//*[@id="history-filterBtn"]'         

        try:
            # 필터(클릭)
            sleep(uniform(2,3))
            self.driver.find_element(By.XPATH, filter_btn).click()               

            # 파일 타입 선택
            select = Select(self.driver.find_element(By.XPATH, select_extension))
            sleep(uniform(2,3))
            select.select_by_visible_text(file_type)

            # 국가 선택
            select = Select(self.driver.find_element(By.XPATH, select_country))     
            sleep(uniform(2,3))
            select.select_by_visible_text(country_type)            

            # 검색
            self.driver.implicitly_wait(5)
            self.driver.find_element(By.XPATH, filter_search_btn).click()        
        except SetFileterError as e:
            print(e)
            return False
        else:
            print(f"""
********************Set Search Options********************
+ Set country type : {country_type} 
+ Set file type    : {file_type}    
**********************************************************
""")
            return True

        
    def get_num_of_current_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        
        try:
            pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
            pages = pages.text.split()
            current_page = int(pages[0])
        except GetNumOfCurrentPageError as e:
            print(e)
            return False
        else:
            return  current_page   
    
    
    def get_num_of_last_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        
        try:
            pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
            pages = pages.text.split()
            last_page = int(pages[2])
        except GetNumOfLastPageError as e:
            print(e)
            return False
        else:
            return last_page     
    
    def get_num_of_sample_page(self):
        sample_list_class = 'history-table--content__row'
        
        try:
            num_of_sample = len(self.driver.find_elements(By.CLASS_NAME, sample_list_class))
        except GetNumOfSamplePageError as e:
            print(e)
            return False
        else:
            return num_of_sample   

    def enter_sample_page(self, sample_cnt):
        sample_link_xpath = f'/html/body/div[7]/div[1]/div[3]/div[1]/div/div[{sample_cnt}]/a'
        
        try:
            self.driver.find_element(By.XPATH, sample_link_xpath).click()            
            sleep(uniform(5,6))
            self.driver.switch_to.window(self.driver.window_handles[-1])
        except EnterSamplePageError as e:
            print(e)
            return False
        else:
            return True
        
        
    def get_sample_name(self):
        sample_name_xpath ='//*[@id="main"]/aside/div[2]/div/div[1]/div[2]/div[2]/div[1]/div[1]'
        
        try:
            sample_name = self.driver.find_element(By.XPATH, sample_name_xpath).text
            sample_name =(sample_name.split('.'))[0]
        except GetSampleNameError as e:
            print(e)
            return False
        else:
            return sample_name


    def get_verdict(self):
        verdict_is_non_malxpath = ' //*[@id="main"]/aside/div[2]/div/div[1]/div[1]/div/span'
        verdict_is_mal_xpath = '//*[@id="main"]/aside/div[2]/div/div[1]/div[1]/div/span[2]'
        
        verdict = self.driver.find_element(By.XPATH,verdict_is_mal_xpath).text
        
        if verdict is False:
            try:
                verdict = self.driver.find_element(By.XPATH, verdict_is_non_malxpath).text
            except GetVerdictError as e:
                print(e)
                return False
            else:
                return verdict
        return verdict


    def download_sample(self):
        download_btn_xpath = '//*[@id="downloadSample"]'
        download_btn_xpath = '//*[@id="downloadSample"]'
        download_popup='/html/body/div[4]/div[1]/div[1]/h3/span'
        try:
            sleep(uniform(8,10))
            self.driver.find_element(By.XPATH, download_btn_xpath).click()
            sleep(uniform(3,6))
            if r"content.any.run/" in self.driver.current_url:
                sleep(uniform(100,200))
                self.driver.back()
                self.download_sample()
            else:    
                try:
                    popup_btn = self.driver.find_element(By.XPATH, download_popup)
                except NoSuchElementException as e:
                    
                    print(f"팝업 버튼을 찾을 수 없습니다.{e}")
                else:
                    popup_btn.click() 
        except DownloadSampleError as e:
            print(e)
            return False
        else:
            return True


        sleep(uniform(5,6))
        try:
            if len(driver.windows_handles) <= 2:
                for window in len(dirver.windows_handles):
                    current_window = self.driver.swich_to.windows(driver.windows_handles[-1])
                    if current_window != dirver.windows_handles[0]:
                        self.driver.close()
                    
                close
        except:
            print("excpet: download_sample: close()")
        # return {sample_name: True}
        return True 
    

    def cleanup_taps(self):
        try:
            while(True):
                taps_handles = self.driver.window_handles
                if len(taps_handles) == 1:
                    break
                else:
                    self.driver.switch_to.window(taps_handles[-1])
                    self.driver.close()
        except CleanUpTaps as e:
            print(e)
            return False
        else:
            self.driver.switch_to.window(taps_handles[0])
            return True
    
    def check_downloaded():
        return True
    

    def turn_page(self):
        next_page_btn_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[3]'
        sleep(5)
        self.driver.find_element(By.XPATH, next_page_btn_xpath).click()
        return True

        
