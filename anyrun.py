from selenium.common.exceptions import NoSuchElementException

from selenium.webdriver.support.select import Select
from selenium.webdriver.common.by import By
from random import uniform
from time import sleep
from openpyxl import load_workbook, Workbook
from anyrun_exception import*

ANYRUN_URL = 'https://app.any.run/submissions'


class Anyrun():
    def __init__(self, driver, id, pw, ):
        self.driver = driver
        self.driver.implicitly_wait(10)
        self.driver.get(ANYRUN_URL)
        self.__accepct_cookie()
        self.__login(id, pw)

    # def recovery_crawler(self):
    #     status =1 
    #     self.set_filter_and_search(self.file_type, self.country_type, self.page, self.sp_cnt)
    #     return         


    def get_samples(self, start_page = 1,):
        wb = Workbook()
        sheet = wb.active
        sheet.title = 'Anyrun 샘플 리스트'
        col_names = ['Name', 'Link', 'Verdict']
        for seq, name in enumerate(col_names):
            sheet.cell(row=1, column=seq+1, value=name)
        last_page = self.__get_num_of_last_page()
        total_sp_cnt = 0
        
        # 페이지 순회
        for page_cnt in range(start_page, last_page):
            sleep(5)    # page reconnecting 대기
            print('**********************************************************')
            print(f"Set start_page: {start_page}")
            print(f"current_page: {self.get_num_of_current_page()}")        
            # 페이지 검사 및 조정 -> 필터는 안바뀌는 것으로 확인함
            if self.get_num_of_current_page() != page_cnt:
                self.__adjust_page(page_cnt)
            print('**********************************************************')
            #한 페이지 내에서 샘플 순회; limit 넣어서 갯수 지정하는거 가능
            
            
            for sample_cnt in range(1, self.get_num_of_sample_page()+1):
                total_sp_cnt +=1 
                print(f"""
                + Current Page         : {page_cnt}                
                + Downloaded cnt       : {sample_cnt}
                + Total Downloaded cnt : {total_sp_cnt}
                """)
                self.__enter_sample_page(sample_cnt)
                # 엑셀기록
                current_sample_name = self.__get_sample_name()
                current_sample_url = self.driver.current_url
                current_sample_verdict = self.__get_verdict()
                values = [current_sample_name,current_sample_url, current_sample_verdict]
                print(f"""
                + 샘플 이름  : {current_sample_name}
                + 샘플 URL   : {current_sample_url}
                + 샘플 위험도: {current_sample_verdict}
                + Total Downloaded cnt : {total_sp_cnt}
                """)
                for cnt, value in enumerate(values):    
                    sheet.cell(row = total_sp_cnt+1, column = cnt+1, value = value)

                self.__download_sample()
                self.__cleanup_taps()
                # 페이지 검사 및조정
                if self.get_num_of_current_page() != page_cnt:
                    self.__adjust_page(page_cnt)
            #중간중간 상태 저장 해야함
            # 페이지수, 전체 샘플 카운트, 샘플 카운트,  
        wb.save("./samples/Anyrun_sample.xlsx")
        wb.close()
        return True


    def __adjust_page(self, correct_page):
        self.__cleanup_taps()
        print(f"! 페이지를 조정합니다.")
        print(f"! 올바른 페이지: {correct_page}")
        try:
            while correct_page != self.get_num_of_current_page():
                self.__turn_page()                
        except:
            raise
            return False
        return True
        

    def __login(self, id,pw):
        login_btn_xpath = '/html/body/nav/ul[2]/li[4]'
        input_id_xpath = '//*[@id="at-field-username_and_email"]'
        input_pw_xpath = '//*[@id="at-field-password"]'
        signin_btn_xpath = '//*[@id="at-btn"]'
        try:
            self.driver.find_element(By.XPATH, login_btn_xpath).click()
            self.driver.find_element(By.XPATH, input_id_xpath).send_keys(id)
            self.driver.find_element(By.XPATH, input_pw_xpath).send_keys(pw)
            self.driver.find_element(By.XPATH, signin_btn_xpath).click()
        except NoSuchElementException as e:
            print(self.__login.__name__, e)
            return False
        else:
            return True


    def __accepct_cookie(self):
        accept_cookie_btn_xpath = '//*[@id="cookies"]/div/a[2]'
        try:
            sleep(uniform(3, 4))
            self.driver.find_element(By.XPATH, accept_cookie_btn_xpath).click()
        except NoSuchElementException as e:
            print(self.__accepct_cookie.__name__, e)
            return False
        else:
            return True


    def set_filter_and_search(self, country_type = 'Korea, Republic of', file_type = 'Adobe PDF'):
        sleep(5)
        filter_search_btn = '//*[@id="historySearchBtn"]'
        select_extension = '//*[@id="searchHistByExt"]'
        select_country = '//*[@id="countrySearch"]'         
        filter_btn = '//*[@id="history-filterBtn"]'         
        
        self.country_type = country_type
        self.file_type = file_type
        try:
            # 필터(클릭)
            sleep(uniform(2,3))
            self.driver.find_element(By.XPATH, filter_btn).click()               

            # 파일 타입 선택
            select = Select(self.driver.find_element(By.XPATH, select_extension))
            sleep(uniform(2,3))
            select.select_by_visible_text(self.file_type)

            # 국가 선택
            select = Select(self.driver.find_element(By.XPATH, select_country))     
            sleep(uniform(2,3))
            select.select_by_visible_text(self.country_type)            

            # 검색
            self.driver.implicitly_wait(5)
            self.driver.find_element(By.XPATH, filter_search_btn).click()        
        except NoSuchElementException as e:
            print(self.set_filter_and_search.__name__, e)
            return False
        else:
            print(f"""
********************Set Search Options********************
+ Set country type : {self.country_type} 
+ Set file type    : {file_type}    
**********************************************************
""")
            return True

        
    def get_num_of_current_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        
        try:
            pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
            pages = pages.text.split()
            current_page = int(pages[0])
        except NoSuchElementException as e:
            print(self.get_num_of_current_page.__name__, e)
            return False
        else:
            return  current_page   
    
    
    def __get_num_of_last_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        
        try:
            pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
            pages = pages.text.split()
            last_page = int(pages[2])
        except NoSuchElementException as e:
            print(self.__get_num_of_last_page.__name__, e)
            return False
        else:
            return last_page     
    

    def get_num_of_sample_page(self):
        sample_list_class = 'history-table--content__row'
        
        try:
            num_of_sample = len(self.driver.find_elements(By.CLASS_NAME, sample_list_class))
        except NoSuchElementException as e:
            print(self.get_num_of_sample_page.__name__, e)
            return False
        else:
            return num_of_sample   


    def __enter_sample_page(self, sample_cnt):
        sample_link_xpath = f'/html/body/div[7]/div[1]/div[3]/div[1]/div/div[{sample_cnt}]/a'
        
        try:
            self.driver.find_element(By.XPATH, sample_link_xpath).click()            
            sleep(uniform(5,6))
            self.driver.switch_to.window(self.driver.window_handles[-1])
        except NoSuchElementException as e:
            print(self.__enter_sample_page.__name__, e)
            return False
        else:
            return True
        
        
    def __get_sample_name(self):
        sample_name_xpath ='//*[@id="main"]/aside/div[2]/div/div[1]/div[2]/div[2]/div[1]/div[1]'
        
        try:
            sample_name = self.driver.find_element(By.XPATH, sample_name_xpath).text
            sample_name =(sample_name.split('.'))[0]
        except NoSuchElementException as e:
            print(self.__get_sample_name.__name__, e)
            return False
        else:
            return sample_name


    def __get_verdict(self):
        verdict_is_non_malxpath = ' //*[@id="main"]/aside/div[2]/div/div[1]/div[1]/div/span'
        verdict_is_mal_xpath = '//*[@id="main"]/aside/div[2]/div/div[1]/div[1]/div/span[2]'
        
        try:
            verdict = self.driver.find_element(By.XPATH,verdict_is_mal_xpath).text
        except:
            try:
                verdict = self.driver.find_element(By.XPATH, verdict_is_non_malxpath).text
            except NoSuchElementException as e:
                print(self.__get_verdict.__name__, e)
                return False
            else:
                verdict
        else:
            return verdict    
            

    def __download_sample(self):
        download_btn_xpath = '//*[@id="downloadSample"]'
        download_popup='/html/body/div[4]/div[1]/div[1]/h3/span'
        try:
            sleep(uniform(8,10))
            self.driver.find_element(By.XPATH, download_btn_xpath).click()
            sleep(uniform(3,6))
            if r"content.any.run/" in self.driver.current_url:
                sleep(uniform(100,200))
                self.driver.back()
                self.__download_sample()
            else:    
                try:
                    popup_btn = self.driver.find_element(By.XPATH, download_popup)
                except NoSuchElementException as e:
                    print(self.__download_sample.__name__, e)
                else:
                    popup_btn.click() 
        except NoSuchElementException as e:
            print(e)
            return False
        else:
            return True



    

    def __cleanup_taps(self):
        while len(self.driver.window_handles) != 1:
            self.driver.switch_to.window(self.driver.window_handles[-1])
            self.driver.close()
        
        self.driver.switch_to.window(self.driver.window_handles[0])
        return True
    
    def check_downloaded():
        return True
    

    def __turn_page(self):
        sleep(5)
        next_page_btn_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[3]'
        try:
            self.driver.find_element(By.XPATH, next_page_btn_xpath).click()
        except NoSuchElementException as e:
            print(self.__turn_page.__name__, e)
            return False
        else:
            return True

        
