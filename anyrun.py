from selenium.common.exceptions import NoSuchElementException

from selenium.webdriver.support.select import Select
from selenium.webdriver.common.by import By
from random import uniform
from time import sleep




class Anyrun():
    def __init__(self, driver):
        self.driver = driver
    
    
    def login(self, id,pw):
        login_btn_xpath = '/html/body/nav/ul[2]/li[4]'
        input_id_xpath = '//*[@id="at-field-username_and_email"]'
        input_pw_xpath = '//*[@id="at-field-password"]'
        signin_btn_xpath = '//*[@id="at-btn"]'

        self.driver.find_element(By.XPATH, login_btn_xpath).click()
        self.driver.find_element(By.XPATH, input_id_xpath).send_keys(id)
        self.driver.find_element(By.XPATH, input_pw_xpath).send_keys(pw)
        self.driver.find_element(By.XPATH, signin_btn_xpath).click()


    def accepct_cookie(self):
        sleep(3)
        accept_cookie_btn_xpath = '//*[@id="cookies"]/div/a[2]'
        self.driver.find_element(By.XPATH, accept_cookie_btn_xpath).click()
    

    # def get_samples(self,current_page = 0,
    #                 last_page = 0,
    #                 file_type = 'Adobe PDF',
    #                 country_type ='Korea, Republic of'
    #                 ):

    #     sleep(uniform(4,5))
        

    #         current_page, last_page = self.get_num_of_page()
            
    #     for current_page in range(last_page):
    #         current_page,last_page = self.get_num_of_page()
    #         sleep(uniform(2,3))
    #         print(f"현재 페이지:{current_page}/{last_page}")
    #         for sample_cnt in range(1, self.get_num_of_sample_page()+1):
    #             self.enter_sample_page(sample_cnt)
    #             self.download_sample()
    #             self.driver.switch_to.window(self.driver.window_handles[0])       # 메인 탭으로 이동
    #             print(f"{sample_cnt}개 다운로드 완료")
    #             sleep(uniform(3,4))
    #         sleep(5)
    #         self.__turn_page()
            
    #     return True

    def set_filter_and_search(self, country_type = 'Korea, Republic of', file_type = 'Adobe PDF'):
        print(f"""
********************Set Search Options********************
+ Set country type : {country_type} 
+ Set file type    : {file_type}    
**********************************************************
""")
        sleep(5)
        filter_search_btn = '//*[@id="historySearchBtn"]'
        select_extension = '//*[@id="searchHistByExt"]'
        select_country = '//*[@id="countrySearch"]'         
        filter_btn = '//*[@id="history-filterBtn"]'         

        # 필터(클릭)
        sleep(uniform(2,3))
        self.driver.find_element(By.XPATH, filter_btn).click()               

        # 파일 타입 선택
        select = Select(self.driver.find_element(By.XPATH, select_extension))
        sleep(uniform(2,3))
        select.select_by_visible_text(file_type)

        # 국가 선택
        select = Select(self.driver.find_element(By.XPATH, select_country))     
        sleep(uniform(2,3))
        select.select_by_visible_text(country_type)            

        # 검색
        self.driver.implicitly_wait(5)
        self.driver.find_element(By.XPATH, filter_search_btn).click()        
        return True

        
    def get_num_of_current_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
        pages = pages.text.split()
        current_page = int(pages[0])
        
        return current_page   
    
    
    def get_num_of_last_page(self):
        num_of_page_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[2]'
        pages = self.driver.find_element(By.XPATH, num_of_page_xpath)
        pages = pages.text.split()
        last_page = int(pages[2])
        return last_page     
    
    def get_num_of_sample_page(self):
        sample_list_class = 'history-table--content__row'
        num_of_sample = len(self.driver.find_elements(By.CLASS_NAME, sample_list_class))
        return num_of_sample   

    def enter_sample_page(self, sample_cnt):
        sample_link_xpath = f'/html/body/div[7]/div[1]/div[3]/div[1]/div/div[{sample_cnt}]/a'
        self.driver.find_element(By.XPATH, sample_link_xpath).click()            
        sleep(uniform(5,6))
        self.driver.switch_to.window(self.driver.window_handles[1])
        
    def get_sample_name(self):
        sample_name_xpath ='//*[@id="main"]/aside/div[2]/div/div[1]/div[2]/div[2]/div[1]/div[1]'
        sample_name = self.driver.find_element(By.XPATH, sample_name_xpath).text
        sample_name =(sample_name.split('.'))[0]

        return sample_name
    def download_sample(self):
        download_btn_xpath = '//*[@id="downloadSample"]'
        sample_name = self.get_sample_name()
        sleep(uniform(5,6))
        
        sleep(uniform(4,6))
        download_btn_xpath = '//*[@id="downloadSample"]'
        download_popup='/html/body/div[4]/div[1]/div[1]/h3/span'
        try:
            down_btn = self.driver.find_element(By.XPATH, download_btn_xpath)
        except NoSuchElementException:
            self.driver.back()
            self.download()

        sleep(uniform(3,6))
        self.driver.find_element(By.XPATH, download_btn_xpath).click()
        sleep(uniform(3,6))
        if r"content.any.run/" in self.driver.current_url:
            sleep(uniform(100,200))
            self.driver.back()
            self.download()
        try:
            self.driver.find_element(By.XPATH, download_popup).click()
        except NoSuchElementException:
            pass        



        sleep(uniform(5,6))
        self.driver.close()
        
        # return {sample_name: True}
        return True 
    
    
    def check_downloaded():
        
        return True
    

    def turn_page(self):
        next_page_btn_xpath = '/html/body/div[7]/div[1]/div[3]/div[2]/div[3]'
        sleep(2)
        self.driver.find_element_by_xpath(next_page_btn_xpath).click()
        return True

        
